---
# This file is a template, and might need editing before it works on your project.
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
# 
# This template will build and test your projects as well as create the documentation.
# 
# * Caches downloaded dependencies and plugins between invocation.
# * Does only verify merge requests but deploy built artifacts of the
#   master branch.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.
variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -Dmaven.test.redirectTestOutputToFile=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -Dspring.profiles.active=gitlab"
  # Postgres Configuration
  POSTGRES_DB: ingest-test
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""


# Cache downloaded dependencies and plugins between builds.
cache:
  paths:
    - .m2/repository/

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin. 
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
.validate: &validate
  before_script:
    - apt-get update -y
    - apt-get install -y rsync
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS test-compile'

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  before_script:
    - apt-get update -y
    - apt-get install -y rsync
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    - master

# Validate merge requests using JDK8
validate:jdk8:
  <<: *validate
  image: maven:3-jdk-8

# Verify merge requests using JDK8
verify:jdk8:
  <<: *verify
  image: maven:3-jdk-8
  services: 
    - postgres:9
  artifacts:
    expire_in: 2 days
    untracked: true
    when: on_failure
    paths:
    - common/target/surefire-reports/
    - tokenizer/target/surefire-reports/
    - rest-common/target/surefire-reports/
    - ingest-rest/target/surefire-reports/
    - replication-shell/target/surefire-reports/


# For `master` and `develop` branches run `mvn deploy` automatically.
# To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.
# Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.
# See https://maven.apache.org/settings.html
deploy:jdk8:
  # Use stage test here, so the pages job may later pickup the created site.
  before_script:
    - apt-get update -y
    - apt-get install -y rsync
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS deploy'
  only:
    - develop
    - /^release-.*$/
  image: maven:3-jdk-8
  services:
    - postgres:9

.rpm: &rpm
  before_script:
    - apt-get update -y
    - apt-get install -y rsync
    - apt-get install -y rpm
  stage: deploy
  only:
    - develop
    - /^release-.*$/
  image: maven:3-jdk-8
  services:
    - postgres:9

rpm_ingest:
  <<: *rpm
  script:
    - 'cd ingest-rest/rpm'
    - './build.sh'
    - 'for f in `find RPMS -type f`; do curl -X POST -H "Authorization: $BUILD_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @$f $SERVER/resource/chronopolis/$CI_BUILD_REF_NAME/$CI_BUILD_REF/$(basename $f); done'

rpm_replication:
  <<: *rpm
  script:
    - 'cd replication-shell/rpm'
    - './build.sh'
    - 'for f in `find RPMS -type f`; do curl -X POST -H "Authorization: $BUILD_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @$f $SERVER/resource/chronopolis/$CI_BUILD_REF_NAME/$CI_BUILD_REF/$(basename $f); done'

deploy_tokenizer:
  stage: deploy
  only:
    - develop
  script:
    - 'cd tokenizer/deploy'
    - './build.sh'
    - 'for f in `find TARS -type f`; do curl -X POST -H "Authorization: $BUILD_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @$f $SERVER/resource/chronopolis/$CI_BUILD_REF_NAME/$CI_BUILD_REF/$(basename $f); done'
  image: maven:3-jdk-8
